#include<bits/stdc++.h>
#include <math.h>
using namespace std;

typedef int ll;
typedef tuple<ll, ll, ll> edge;

struct union_find {
	vector<int> p, rank, size_of_set;
    int num_sets;

    union_find(int N) { 
        p.assign(N, 0); for (int i=0; i<N; i++) p[i] = i;
        rank.assign(N, 0);
        size_of_set.assign(N, 1);
        num_sets = N;
    }

    int find_set(int i) {
        return (p[i] == i) ? i : (p[i] = find_set(p[i])); 
    }

    bool same_set(int i, int j) {
        return find_set(i) == find_set(j);
    }

    int set_size(int i) {
        return size_of_set[find_set(i)];
    }

    void union_set(int i, int j) {
        if (same_set(i, j)) return;

        int x = find_set(i), y = find_set(j);
        if (rank[x] > rank[y]) swap(x, y);
        p[x] = y;
        if (rank[x] == rank[y]) rank[y]++;
        size_of_set[y] += size_of_set[x];
        num_sets--;
    }
};
 
//struct point {
    //ll x, y;
//};

typedef pair<ll, ll> point;

ll dist (ll a, ll b, ll c, ll d) {
    return abs(c-a) + abs(d-b);
}

int main(){
	ios::sync_with_stdio(0);
	cin.tie(0);

    int N;
    cin >> N;
    vector<point> points(N);
    for (point &a: points) cin >> a.first >> a.second;

    sort(points.begin(), points.end());

    vector<edge> edgelist;
    for (int i=0; i<N; i++) {

        int min_dist = 1e9;

        for (int j=i+1; j<N; j++) {
            point a1 = points[i];
            point a2 = points[j];

            int dist1 = dist(a1.first, a1.second, a2.first, a2.second);

            if (dist1 <= min_dist) {
                min_dist = dist1;
                edgelist.push_back({dist1, i, j});
            }
        }
    }

    sort(edgelist.begin(), edgelist.end());

    union_find uf(N);
    ll cost = 0.0;
    int num_taken = 0;

    int m = edgelist.size();
    for (int i=0; i<m; i++) {
        auto [w, u, v] = edgelist[i];

        if (!uf.same_set(u, v)) {
            cost += w;
            num_taken++;
            //if (num_taken == C-1) break;
            uf.union_set(u, v);
        }
    }

    cout << cost << endl << endl;

	return 0;
}
